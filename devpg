#!/usr/bin/env bash
set -e
set -u

init_script=()
tmp_directory=/tmp/devpg-$$/
port=15432
distro=
pg_executable_dir=
initdb_exe=
pg_ctl_exe=
createdb_exe=

usage () {
    cat <<'END'
devpg launches a temporary, development instance of Postgresql 

Usage:
    devpg [OPTION]...

Options:
    -h, --help
    -x, --pg-executable-dir=DIR  postgres executable dir like /usr/lib/postgres/12
    -i, --init-script=FILENAME   initialize the database with some sql
                                 (may be repeated)
    -p, --port=INT               local port (default: 15432)
    -t, --tmp-directory=DIRNAME  temporary directory (default: /tmp/devpg-$PID)

For more info: https://github.com/tnishimura/devpg
END
    exit 1
}

determine_distro () {
    id_like=`grep "^ID_LIKE" /etc/os-release`
    if [[ -z $id_like ]] 
    then
        
        exit 1
    fi
    if grep -q debian <<< "$id_like" 2> /dev/null 
    then
        distro=debian
    fi
    if grep -q suse <<< "$id_like" 2> /dev/null 
    then
        distro=suse
    fi
}

find_exes () {
    # on suse: /usr/lib/postgresql##/bin/initdb
    # on ubuntu: /usr/lib/postgresql/##/bin/initdb
    # on redhat: 

    major_versions=( 15 14 13 12 11 10 9 8 7 )

    for v in "${major_versions[@]}" 
    do 
        [[ $distro == "debian" ]] && d="/usr/lib/postgresql/$v"
        [[ $distro == "suse"   ]] && d="/usr/lib/postgresql$v"

        if [[ -d "$d" && -f "$d/bin/initdb" && -f "$d/bin/pg_ctl" ]]
        then
            initdb_exe="$d/bin/initdb"
            pg_ctl_exe="$d/bin/pg_ctl"
            createdb_exe="$d/bin/createdb"
            break
        fi
    done
}

preflight_checks () {
    for s in ${init_script[@]}
    do
        if [[ -n $s ]] && [[ ! -f $s ]] 
        then
            echo "Cannot find initialization script file $s"
            exit 1
        fi
    done 

    if [[ -z $pg_executable_dir ]] 
    then
        determine_distro
        if [[ -z $distro ]] 
        then
            echo "Could not determine distro? please specify initdb manually with -I"
            exit 1
        fi
        find_exes
    else
        initdb_exe="$pg_executable_dir/bin/initdb"
        pg_ctl_exe="$pg_executable_dir/bin/pg_ctl"
        createdb_exe="$pg_executable_dir/bin/createdb"
    fi

    if [[ ! -f $initdb_exe ]] || [[ ! -f $pg_ctl_exe ]] || [[ ! -f $createdb_exe ]]
    then
        echo "cannot find suitable initdb/pg_ctl/createdb, please specify postgresql executables dir with -x"
        exit 1
    fi

    # check that psql is available
    if ! hash psql 2> /dev/null
    then
        echo "psql not found, please install it"
        exit 1
    fi

    echo "using $initdb_exe and $pg_ctl_exe"

    db_dir=$tmp_directory/db
    socket_dir=$tmp_directory/run
    log_file=$tmp_directory/log
}

run_initdb () {
    mkdir -p $tmp_directory
    echo "Running $initdb_exe -D \"$tmp_directory/db\""
    $initdb_exe -D $tmp_directory/db
}

start_postgresql () {
    echo "Starting"
    mkdir -p $socket_dir
    # -o option gets passed to postgres binary, see 'man postgres'
    # -p is for port, -k is equiv to setting unix_socket_directory
    $pg_ctl_exe \
        -l $log_file \
        -D $db_dir \
        -o "-p $port -k \"$socket_dir\" " \
        start || (
        cat $log_file
        exit 1
    )
    $createdb_exe -p $port -h $socket_dir $USER
    
    for s in ${init_script[@]}
    do
        echo $s
        psql \
            -v ON_ERROR_STOP=1 \
            -p $port \
            -h $socket_dir \
            -f $s 
    done
}

cleanup () {
    $pg_ctl_exe \
        -D $db_dir \
        stop || (
        cat $log_file
        exit 1
    )

    if [[ -d $tmp_directory ]]
    then
        echo "removing $tmp_directory"
        rm -rf "$tmp_directory"
    fi
}

connect_with_psql () {
    psql -h $socket_dir -p $port 
}

while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -h|--help)
            usage
            ;;
        -x|--pg-executable-dir)
            pg_executable_dir="$2"
            shift
            shift
            ;;
        -p|--port)
            port="$2"
            shift
            shift
            ;;
        -i|--init-script)
            init_script+=( "$2" )
            shift
            shift
            ;;
        -t|--tmp-directory)
            tmp_directory="$2"
            shift 
            shift
            ;;
        *)    
            usage
            ;;
    esac
done


trap cleanup EXIT

preflight_checks
run_initdb
start_postgresql
connect_with_psql

